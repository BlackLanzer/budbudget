# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # # This workflow contains a single job called "build"
  # deploy:
  #   # The type of runner that the job will run on
  #   runs-on: self-hosted

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2

  #     - name: Build back end image
  #       run: |
  #         cd BudBudget.REST
  #         docker build -t budbudget.rest .
          
  #     - name: Deploy image
  #       run: >
  #         docker run -d -p 80:5000
  #         -e PGSQL_HOST=localhost
  #         -e ASPNETCORE_URLS=http://+:5000
  #         -e ASPNETCORE_ENVIRONMENT=Development
  #         budbudget.rest:latest

  build-and-publish-backend:
      runs-on: ubuntu-latest
      steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          cd BudBudget.REST
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/budbudget.rest:${{ github.run_number}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/budbudget.rest:${{ github.run_number}}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-publish-backend
    steps:
    - name: Deploy to Docker Host
      uses: wshihadeh/docker-deployment-action@v1
      with:
        remote_docker_host: ${{ secrets.DOCKER_HOST }} #user@server.com
        ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
        ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
        deployment_mode: docker-compose
        stack_file_name: docker-compose.azure.yml
        pre_deployment_command_args: down
        args: up -d
        pull_images_first: 'true'
        copy_stack_file: true
      env:
        PGSQL_HOST: ${{ secrets.PGSQL_HOST }}
        PGSQL_DATABASE: ${{ secrets.PGSQL_DATABASE }}
        PGSQL_USERNAME: ${{ secrets.PGSQL_USERNAME }}
        PGSQL_PASSWORD: ${{ secrets.PGSQL_PASSWORD }}
        ASPNETCORE_ENVIRONMENT: Development
