[{"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\App.tsx":"1","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\services\\DataService.ts":"2","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\containers\\TransactionsContainer.tsx":"3","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\index.tsx":"4","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\config.tsx":"5","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\services\\LoginService.ts":"6","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\containers\\DashboardContainer.tsx":"7","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\components\\CategoryBarChart.tsx":"8","C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\components\\BalanceLinesChart.tsx":"9"},{"size":1354,"mtime":1613081268640,"results":"10","hashOfConfig":"11"},{"size":691,"mtime":1612704877786,"results":"12","hashOfConfig":"11"},{"size":2044,"mtime":1613081268643,"results":"13","hashOfConfig":"11"},{"size":579,"mtime":1612721973589,"results":"14","hashOfConfig":"11"},{"size":278,"mtime":1613081274244,"results":"15","hashOfConfig":"11"},{"size":648,"mtime":1613081274246,"results":"16","hashOfConfig":"11"},{"size":1493,"mtime":1613092118788,"results":"17","hashOfConfig":"11"},{"size":1057,"mtime":1613092066208,"results":"18","hashOfConfig":"11"},{"size":1188,"mtime":1613091456926,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7profx",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\App.tsx",[],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\services\\DataService.ts",[],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\containers\\TransactionsContainer.tsx",["42","43","44"],"import { Button, Input, Layout, Select } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsTable from \"../components/TransactionsTable\";\nimport { Category } from \"../models/Category\";\nimport { Entry } from \"../models/Entry\";\nimport { getCategories, getEntries } from \"../services/DataService\";\nimport \"./TransactionsContainer.css\";\n\nconst { Header, Content } = Layout;\n\nexport interface TableEntry extends Entry {\n\tkey: string;\n}\n\nconst { Search } = Input;\nconst { Option } = Select;\n\nexport default function TransactionsContainer() {\n\tconst [entries, setEntries] = useState<TableEntry[]>([]);\n\tconst [categories, setCategories] = useState<Category[]>([]);\n\tconst [selectedEntries, setSelectedEntries] = useState<TableEntry[]>([]);\n\tconst [nameFilter, setNameFilter] = useState(\"\");\n\tconst [categoriesFilter, setCategoriesFilter] = useState<Category[]>([]);\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst entries = await (await getEntries()).map((e) => {\n\t\t\t\treturn { key: e.id, ...e };\n\t\t\t});\n\t\t\tsetEntries(entries);\n\t\t\tconst categories = await getCategories();\n\t\t\tsetCategories(categories);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst filteredEntries = entries.filter((e) =>\n\t\te.description.includes(nameFilter)\n\t);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<Header className=\"header_transactions\">\n\t\t\t\t<Button>test</Button>\n\t\t\t\t<Select\n\t\t\t\t\tshowSearch\n\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\tstyle={{ width: 200 }}\n\t\t\t\t\tplaceholder=\"Categorie\"\n\t\t\t\t\t// onChange={onChange}\n\t\t\t\t\tfilterOption\n\t\t\t\t>\n\t\t\t\t\t{categories.map((c) => {\n\t\t\t\t\t\treturn <Option value={c.name}>{c.name}</Option>;\n\t\t\t\t\t})}\n\t\t\t\t</Select>\n\t\t\t\t<Search\n\t\t\t\t\tplaceholder=\"Cerca...\"\n\t\t\t\t\tallowClear\n\t\t\t\t\tonChange={(e) => setNameFilter(e.target.value)}\n\t\t\t\t\tclassName=\"search_name\"\n\t\t\t\t/>\n\t\t\t</Header>\n\t\t\t<Content className=\"content_transactions\">\n\t\t\t\t<TransactionsTable\n\t\t\t\t\tdataSource={filteredEntries}\n\t\t\t\t\trowSelection={{\n\t\t\t\t\t\ttype: \"checkbox\",\n\t\t\t\t\t\tonChange: (keys, rows) => {\n\t\t\t\t\t\t\tsetSelectedEntries(rows);\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Content>\n\t\t</Layout>\n\t);\n}\n",["45","46"],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\index.tsx",[],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\config.tsx",[],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\services\\LoginService.ts",[],["47","48"],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\containers\\DashboardContainer.tsx",[],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\components\\CategoryBarChart.tsx",["49","50"],"C:\\Users\\Antonio\\projects\\budbudget\\BudBudget.WEB\\src\\components\\BalanceLinesChart.tsx",["51"],"import React from 'react'\r\nimport { Line } from \"@ant-design/charts\";\r\n\r\nexport default function BalanceLinesChart() {\r\n\tinterface MonthlyData {\r\n\t\tmonth: string, // eg. december ...\r\n\t\tmonthValue: number, // always a positive value\r\n\t\ttype: string // either gains or losses\r\n\t}\r\n\t\r\n\tfunction generateDataSource() : MonthlyData[] {\r\n\t\t// Somehow fetch entries by category here\r\n\t\tvar data : MonthlyData[] = [];\r\n\r\n\t\tconst monthNames = [\r\n\t\t\t\"Gennaio\",\r\n\t\t\t\"Febbraio\",\r\n\t\t\t\"Marzo\",\r\n\t\t\t\"Aprile\",\r\n\t\t\t\"Maggio\",\r\n\t\t\t\"Giugno\",\r\n\t\t\t\"Luglio\",\r\n\t\t\t\"Agosto\",\r\n\t\t\t\"Settembre\",\r\n\t\t\t\"Ottobre\",\r\n\t\t\t\"Novembre\",\r\n\t\t\t\"Dicembre\"\r\n\t\t]\r\n\r\n\t\t// If no entries found, fill with example data\r\n\t\tif(data.length == 0) {\r\n\t\t\tfor(let j = 0; j < 2; j++) {\r\n\t\t\t\tfor(let i = 0; i < 12; i++) {\r\n\t\t\t\t\tdata.push({\r\n\t\t\t\t\t\tmonth: monthNames[i],\r\n\t\t\t\t\t\tmonthValue: Math.floor(Math.random() * 1000),\r\n\t\t\t\t\t\ttype: j ? \"Entrata\" : \"Uscita\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\treturn data;\r\n\t}\r\n\r\n\tconst dataSource = generateDataSource();\r\n\r\n\tconst config = {\r\n\t\tdata: dataSource,\r\n\t\txField: \"month\",\r\n\t\tyField: \"monthValue\",\r\n\t\tseriesField: \"type\",\r\n\t\tcolor: [\"green\", \"red\"]\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Line {...config} />\r\n\t)\r\n}\r\n",{"ruleId":"52","severity":1,"message":"53","line":21,"column":9,"nodeType":"54","messageId":"55","endLine":21,"endColumn":24},{"ruleId":"52","severity":1,"message":"56","line":23,"column":9,"nodeType":"54","messageId":"55","endLine":23,"endColumn":25},{"ruleId":"52","severity":1,"message":"57","line":23,"column":27,"nodeType":"54","messageId":"55","endLine":23,"endColumn":46},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":15,"column":18,"nodeType":"66","messageId":"67","endLine":15,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":21,"column":32,"nodeType":"66","messageId":"67","endLine":21,"endColumn":34},{"ruleId":"64","severity":1,"message":"65","line":31,"column":18,"nodeType":"66","messageId":"67","endLine":31,"endColumn":20},"@typescript-eslint/no-unused-vars","'selectedEntries' is assigned a value but never used.","Identifier","unusedVar","'categoriesFilter' is assigned a value but never used.","'setCategoriesFilter' is assigned a value but never used.","no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]